<div class="w-full h-screen experience">
  <div
    class="absolute w-full h-screen bg-radial from-transparent from-60% to-dark to-90% lg:from-45% lg:to-75%"
  >
  </div>
  <canvas id="midu3d" class="absolute -z-1"></canvas>
  <div class="balls"></div>
</div>

<style>
  .balls {
    width: 100%;
    height: 100vh;
    display: block;
    position: absolute;
    left: 0;
    top: 0;
    z-index: -2;
    background: url("/images/balls.png");
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
  }
</style>

<script>
  import * as THREE from "three";
  import { EffectPass, RenderPass, EffectComposer } from "postprocessing";
  import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
  import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
  import { OrbitControls } from "three/addons/controls/OrbitControls.js";
  import { DitheringEffect } from "./experience/effect/DitheringEffect";
  import GUI from "lil-gui";
  import gsap from "gsap";
  import { lights } from "./experience/lights";

  // ::::::: GLOBALES ::::::
  const canvas = document.getElementById("midu3d");

  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight,
  };

  // ::::::: GUI-FOLDERS ::::::::
  let folderLights, cameraFolder, ditheringFolder;

  if (window.location.hash === "#controls") {
    const gui = new GUI();
    folderLights = gui.addFolder("Ajustes de Luz");
    folderLights.open();

    cameraFolder = gui.addFolder("Ajustes de Camera");
    cameraFolder.open();

    ditheringFolder = gui.addFolder("Ajustes de Dithering");
    ditheringFolder.open();
  }

  // ::::::: SCENE :::::::::
  const scene = new THREE.Scene();

  // ::::::: LUCES :::::::::
  lights(scene);

  // :::::: CAMERA ::::::::
  const ARCamera = sizes.width / sizes.height;
  let zoom = 0;
  if (sizes.width < 768) {
    zoom = 12.5; // movil
  } else if (sizes.width < 1024) {
    zoom = 9; // tablet
  } else {
    zoom = 6.5; // laptop & escritorio
  }

  const camera = new THREE.OrthographicCamera(
    -ARCamera * zoom + 0.6,
    ARCamera * zoom - 1,
    zoom,
    -zoom + 0.6,
    -10,
    40,
  );
  camera.position.set(-11.77, 7, 18.75);

  scene.add(camera);

  if (window.location.hash === "#controls") {
    cameraFolder
      ?.add(camera.position, "x", -20, 20, 0.01)
      .name("Camera Position X");
    cameraFolder
      ?.add(camera.position, "y", -20, 20, 0.01)
      .name("Camera Position Y");
    cameraFolder
      ?.add(camera.position, "z", -20, 20, 0.01)
      .name("Camera Position Z");
    cameraFolder?.add(camera, "left", -40, 0).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "right", 0, 40).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "top", 0, 40).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "bottom", -40, 0).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "near", -10, 10).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "far", 0, 30).onChange(() => {
      camera.updateProjectionMatrix();
    });
  }

  // :::::: RENDER :::::::
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    powerPreference: "high-performance",
    alpha: true,
  });
  renderer.setSize(sizes.width, sizes.height);
  renderer.shadowMap.enabled = true;

  // :::::: POSTPROCESSING ::::::
  const composer = new EffectComposer(renderer);
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  let pixelSizeRatio, gridSize;

  if (sizes.width < 768) {
    pixelSizeRatio = 2.0; // movil
    gridSize = 2.0;
  } else if (sizes.width < 1024) {
    pixelSizeRatio = 2.0; // tablet
    gridSize = 2.9;
  } else {
    pixelSizeRatio = 2.0; // laptop & escritorio
    gridSize = 3.0;
  }

  const ditheringEffect = new DitheringEffect({
    pixelSizeRatio, // tamano de los pixeles
    gridSize, // tamano de la cuadrÃ­cula del dithering
    grayscaleOnly: false, // solo blanco y negro
  });

  const ditherinPass = new EffectPass(camera, ditheringEffect);
  composer.addPass(ditherinPass);

  // :::::: DITHERING CONTROLS ::::::
  if (window.location.hash === "#controls") {
    ditheringFolder
      ?.add({ pixelSizeRatio: 2 }, "pixelSizeRatio", 1, 10, 0.1) // Rango de 1-10 con step 1
      .name("Pixelation Strength")
      .onChange((value: number) => {
        ditheringEffect.setPixelSizeRatio(value);
      });

    ditheringFolder
      ?.add({ gridSize: 3.0 }, "gridSize", 1, 20, 0.1) // Rango de 1-20 con step 1
      .name("Effect Resolution")
      .onChange((value: number) => {
        ditheringEffect.setGridSize(value);
      });
  }

  // :::::: CONTROLS :::::::
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.update();
  controls.enableZoom = false;
  controls.enablePan = false;
  controls.enableRotate = false;
  controls.enableDamping = false;

  // :::::: ENVIRONMENT :::::::
  const hdr =
    "https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/je_gray_park_1k.hdr";

  let environmentTexture;
  new RGBELoader().load(hdr, (texture) => {
    environmentTexture = texture;
    environmentTexture.mapping = THREE.EquirectangularReflectionMapping;
    scene.environment = environmentTexture;
    scene.environmentIntensity = 0.02;
  });

  // :::::: MODELO & RAYCASTER ::::::
  const pointer = new THREE.Vector2();
  const raycaster = new THREE.Raycaster();
  let isPressed = false;
  let isRotating = false;
  let shakeAnimation;

  const loader = new GLTFLoader();
  let model;

  loader.load("./logo.glb", (gltf) => {
    model = gltf.scene;

    model.traverse((node) => {
      if (node.isMesh) {
        node.castShadow = true;
        node.receiveShadow = true;
      }
    });

    // :::::::::: ANIMACIONES :::::::::::
    let initZPositions = [3.430607, 5.8232, 3.129749, 1.349015];

    gltf.scene.children.forEach((child, idx) => {
      const finalZ = child.position.z;

      child.position.z = initZPositions[idx];

      gsap.fromTo(
        child.scale,
        {
          x: 0,
          y: 0,
          z: 0,
        },
        {
          x: 178,
          y: 178,
          z: 178,
        },
      );
      let offsetZ = sizes.width < 768 ? 3.5 : sizes.width < 1024 ? 2 : 0.3;
      gsap.to(child.position, {
        z: () => finalZ - offsetZ,
        duration: 1.2,
        ease: "elastic.out(1, 0.5)",
        delay: idx * 0.1,
      });
    });

    scene.add(gltf.scene);
  });

  function onMouseMoveRaycaster(event) {
    const rect = canvas?.getBoundingClientRect();

    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    pointer.x = (x / sizes.width) * 2 - 1;
    pointer.y = -(y / sizes.height) * 2 + 1;
  }

  // :::::: RAYCASTER ::::::
  function moveRaycast(event) {
    if (!model || isPressed) return;
    // normalizamos x e y del pointer con Vector2 y
    onMouseMoveRaycaster(event);

    // actualizamos el rayo de seleccion con la camara y la posicion del puntero para rasterar
    raycaster.setFromCamera(pointer, camera);
    // rasteramos
    const intersects = raycaster.intersectObjects(model.children);

    if (intersects.length) {
      document.body.style.cursor = "pointer";
      gsap.to(model.scale, {
        x: 1.1,
        y: 1.1,
        z: 1.1,
        duration: 0.5,
        ease: "elastic.out(1, 0.55)",
      });
    } else {
      document.body.style.cursor = "default";
      gsap.to(model.scale, {
        x: 1.0,
        y: 1.0,
        z: 1.0,
        duration: 0.5,
        ease: "elastic.out(1, 0.55)",
      });
    }
  }

  function onPress(event) {
    if (!model) return;
    onMouseMoveRaycaster(event);

    raycaster.setFromCamera(pointer, camera);
    const intersects = raycaster.intersectObjects(model.children);

    if (intersects.length) {
      isPressed = true;

      gsap.to(model.scale, {
        x: 0.8,
        y: 0.8,
        z: 0.8,
      });

      shakeAnimation = gsap.to(model.position, {
        x: "+=0.04",
        y: "+=0.04",
        z: "+=0.04",
        yoyo: true,
        repeat: -1,
        duration: 0.05,
        ease: "steps(10)",
      });
    }
  }

  function onRelease() {
    if (!model || !isPressed) return;

    isPressed = false;
    isRotating = true;

    if (shakeAnimation) {
      shakeAnimation.kill();
    }

    gsap.to(model.scale, {
      x: 1,
      y: 1,
      z: 1,
      duration: 0.5,
      ease: "elastic.out(1, 0.55)",
    });
    gsap.to(model.rotation, {
      z: `+=${Math.PI * 2}`,
      duration: 1,
      ease: "elastic.out(1, 0.55)",
      onComplete: () => {
        isRotating = false;
      },
    });
    gsap.to(model.position, {
      x: 0,
      y: 0,
      z: 0,
    });
  }

  window.addEventListener("mousemove", moveRaycast);
  window.addEventListener("mousedown", onPress);
  window.addEventListener("mouseup", onRelease);

  // :::::: RESIZE :::::::
  window.addEventListener("resize", () => {
    // camera
    sizes.width = window.innerWidth;
    sizes.height = window.innerHeight;

    // aspect
    const ARCamera = sizes.width / sizes.height;
    let zoom;

    if (sizes.width < 768) {
      zoom = 14; // movil
    } else if (sizes.width < 1024) {
      zoom = 9; // tablet
    } else {
      zoom = 7; // laptop & escritorio
    }

    camera.aspect = sizes.width / sizes.height;
    camera.left = -ARCamera * zoom + 0.6;
    camera.right = ARCamera * zoom - 1;
    camera.top = zoom;
    camera.bottom = -zoom + 0.6;
    camera.updateProjectionMatrix();

    // renderer
    renderer.setSize(sizes.width, sizes.height);
    composer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  });

  // ::::::: MOUSE MOVE :::::::
  document.addEventListener("mousemove", (e) => onMouseMove(e));

  let mouse = {
    mouseX: 0,
    mouseY: 0,
    targetX: 0,
    targetY: 0,
    windowHalfX: sizes.width / 2,
    windowHalfY: sizes.height / 2,
  };

  function onMouseMove(event) {
    // raton X e Y desde el centro de la pantalla
    mouse.mouseX = event.clientX - mouse.windowHalfX;
    mouse.mouseY = event.clientY - mouse.windowHalfY;
  }

  // variables de rotacion actual
  let currentRotationX = Math.PI / 2; // importante para que el modelo este parado
  let currentRotationY = 0;

  const clock = new THREE.Clock();
  // :::::: ANIMATION :::::
  function animation() {
    const elapsedTime = clock.getElapsedTime();

    if (model) {
      mouse.targetX = mouse.mouseX * 0.0003;
      mouse.targetY = mouse.mouseY * 0.0003;

      // animacion suave de rotacion
      currentRotationY += (mouse.targetX - currentRotationY) * 0.06;
      currentRotationX += (mouse.targetY - currentRotationX) * 0.06;

      // actuailzar rotacion del modelo
      model.rotation.x = currentRotationX + Math.PI / 2;
      if (!isRotating) {
        model.rotation.z = currentRotationY;
      }

      // flotar
      model.position.y = Math.sin(elapsedTime * 3) * 0.15;
    }

    controls.update();

    composer.render(scene, camera);
    window.requestAnimationFrame(animation);
  }
  animation();
</script>
