<div class="w-full h-screen">
  <div
    class="absolute w-full h-screen bg-radial from-transparent from-40% to-dark to-70%"
  >
  </div>
  <canvas id="midu3d" class="absolute -z-1"></canvas>
  <div class="balls"></div>
</div>

<style>
  .balls {
    width: 100%;
    height: 100vh;
    display: block;
    position: absolute;
    z-index: -2;
    background: url("/images/balls.png");
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
  }
</style>

<script>
  import * as THREE from "three";
  import { EffectPass, RenderPass, EffectComposer } from "postprocessing";
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
  import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { DitheringEffect } from "./experience/effect/DitheringEffect";
  import GUI from "lil-gui";
  import gsap from "gsap";

  // ::::::: GLOBALES ::::::
  const canvas = document.getElementById("midu3d");

  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight,
  };

  // ::::::: GUI-FOLDERS ::::::::
  let folderLights, cameraFolder, ditheringFolder;

  if (window.location.hash === "#controls") {
    const gui = new GUI();
    folderLights = gui.addFolder("Ajustes de Luz");
    folderLights.open();

    cameraFolder = gui.addFolder("Ajustes de Camera");
    cameraFolder.open();

    ditheringFolder = gui.addFolder("Ajustes de Dithering");
    ditheringFolder.open();
  }

  // ::::::: SCENE :::::::::
  const scene = new THREE.Scene();

  // ::::::: LUCES :::::::::
  const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
  scene.add(ambientLight);

  const lights = [
    {
      color: 0x9793b4,
      intensity: 9.45,
      distance: 12.85,
      angle: 1.57079,
      positionX: -12.04,
      positionY: 12.34,
      positionZ: -0.46,
      positionRotationX: 10.37,
      positionRotationY: -16.33,
      positionRotationZ: -0.23,
      penumbra: 0.32,
      decay: 0.19,
      isCastShadow: true,
      mapSizeWidth: 1024,
      mapSizeHeight: 1024,
      cameraFov: 44.89,
      cameraNear: 3.35,
      cameraFar: 14.47,
      shadowBias: 0.1,
      shadowRadius: 3.9,
    },
    {
      color: 0x9793b4,
      intensity: 8.52,
      distance: 27.25,
      angle: 0.687,
      positionX: -2.29,
      positionY: 22.2,
      positionZ: 5.45,
      positionRotationX: 4.87,
      positionRotationY: -16.33,
      positionRotationZ: -0.23,
      penumbra: 0,
      decay: 0.4,
      isCastShadow: true,
      mapSizeWidth: 1024,
      mapSizeHeight: 1024,
      cameraFov: 33.18,
      cameraNear: 25.13,
      cameraFar: 45.03,
      shadowBias: 0.1,
      shadowRadius: 3.9,
    },
    {
      color: 0x5a8cf6,
      intensity: 2.68,
      distance: 24.11,
      angle: 1.57079,
      positionX: -7.52,
      positionY: 1.26,
      positionZ: 7.54,
      positionRotationX: -7.21,
      positionRotationY: 1.73,
      positionRotationZ: 0.16,
      penumbra: 0.31,
      decay: 0.95,
      isCastShadow: true,
      mapSizeWidth: 1032,
      mapSizeHeight: 1032,
      cameraFov: 27.64,
      cameraNear: 5.74,
      cameraFar: 17.55,
      shadowBias: 0.0136,
      shadowRadius: 11.3,
    },
    {
      color: 0x5a8cf6,
      intensity: 4.58,
      distance: 24.46,
      angle: 1.201,
      positionX: 3.59,
      positionY: 0.85999,
      positionZ: 7.86,
      positionRotationX: -8.7,
      positionRotationY: 0.46999,
      positionRotationZ: -7.42,
      penumbra: 0.4,
      decay: 0.9,
      isCastShadow: true,
      mapSizeWidth: 1035,
      mapSizeHeight: 1035,
      cameraFov: 27.64,
      cameraNear: 5.74,
      cameraFar: 24.44,
      shadowBias: 0.0121,
      shadowRadius: 11.3,
    },
  ];

  lights.forEach(
    (
      {
        color,
        intensity,
        distance,
        angle,
        positionX,
        positionY,
        positionZ,
        positionRotationX,
        positionRotationY,
        positionRotationZ,
        penumbra,
        decay,
        isCastShadow,
        mapSizeWidth,
        mapSizeHeight,
        cameraFov,
        cameraFar,
        cameraNear,
        shadowBias,
        shadowRadius,
      },
      idx,
    ) => {
      const spotLight = new THREE.SpotLight(color, intensity, distance, angle);
      // spotLight settings
      spotLight.distance = distance;
      spotLight.position.set(positionX, positionY, positionZ);
      spotLight.target.position.set(
        positionRotationX,
        positionRotationY,
        positionRotationZ,
      );
      spotLight.penumbra = penumbra;
      spotLight.decay = decay;

      // sombras
      spotLight.castShadow = isCastShadow;
      spotLight.shadow.mapSize.width = mapSizeWidth;
      spotLight.shadow.mapSize.height = mapSizeHeight;
      spotLight.shadow.camera.fov = cameraFov;
      spotLight.shadow.camera.near = cameraNear;
      spotLight.shadow.camera.far = cameraFar;
      spotLight.shadow.bias = shadowBias;
      spotLight.shadow.radius = shadowRadius;

      scene.add(spotLight);
      scene.add(spotLight.target);

      const spotLightCameraHelper = new THREE.CameraHelper(
        spotLight.shadow.camera,
      );
      spotLightCameraHelper.visible = false;
      scene.add(spotLightCameraHelper);

      if (window.location.hash === "#controls") {
        const lightFolder = folderLights.addFolder(`Light ${idx + 1}`);
        lightFolder.close();

        lightFolder.add(spotLight, "visible").name("Light Visible/Hidden");
        lightFolder
          .add(spotLightCameraHelper, "visible")
          .name("Light Helper Visible/Hidden");
        lightFolder
          .add(spotLight.position, "x", -40, 40, 0.01)
          .name("Light Position X");
        lightFolder
          .add(spotLight.position, "y", -40, 40, 0.01)
          .name("Light Position Y");
        lightFolder
          .add(spotLight.position, "z", -40, 40, 0.01)
          .name("Light Position Z");
        lightFolder
          .add(spotLight.target.position, "x", -30, 30, 0.01)
          .name("Light Rotation X");
        lightFolder
          .add(spotLight.target.position, "y", -30, 30, 0.01)
          .name("Light Rotation Y");
        lightFolder
          .add(spotLight.target.position, "z", -30, 30, 0.01)
          .name("Light Rotation Z");
        lightFolder
          .add(spotLight, "intensity", 0, 15, 0.01)
          .name("Light Intensity");
        lightFolder
          .add(spotLight, "distance", 0, 30, 0.01)
          .name("Light Distance");
        lightFolder
          .add(spotLight.shadow.camera, "far", 0, 100, 0.01)
          .name("Light Far")
          .onChange(() => {
            spotLight.shadow.camera.updateProjectionMatrix();
            spotLightCameraHelper.update();
          });
        lightFolder
          .add(spotLight.shadow.camera, "near", 0, 50, 0.01)
          .name("Light Near")
          .onChange(() => {
            spotLight.shadow.camera.updateProjectionMatrix();
            spotLightCameraHelper.update();
          });
        lightFolder
          .add(spotLight.shadow.camera, "fov", 1, 180, 0.01)
          .name("Shadow Camera FOV")
          .onChange(() => {
            spotLight.shadow.camera.updateProjectionMatrix();
            spotLightCameraHelper.update();
          });
        lightFolder
          .add(spotLight, "angle", 0, Math.PI / 2, 0.001)
          .name("Light Angle");
        lightFolder
          .add(spotLight, "penumbra", 0, 1, 0.01)
          .name("Light Penumbra");
        lightFolder.add(spotLight, "decay", 0, 2, 0.01).name("Light Decay");
        lightFolder
          .addColor({ color: spotLight.color.getHex() }, "color")
          .name("Light Color")
          .onChange((c) => spotLight.color.setHex(c));
        lightFolder.add(spotLight, "castShadow").name("Cast Shadows");
        lightFolder
          .add(spotLight.shadow, "bias", -0.1, 0.1, 0.0001)
          .name("Shadow Bias");
        lightFolder
          .add(spotLight.shadow.mapSize, "width", 128, 2048, 1)
          .name("Shadow Map Width")
          .onChange(
            () =>
              (spotLight.shadow.mapSize.height =
                spotLight.shadow.mapSize.width),
          );
        lightFolder
          .add(spotLight.shadow, "radius", 1, 20, 0.1)
          .name("Shadow Radius");
      }
    },
  );

  // :::::: CAMERA ::::::::
  const ARCamera = sizes.width / sizes.height;
  let zoom = 0;
  if (sizes.width < 768) {
    zoom = 12.5; // movil
  } else if (sizes.width < 1024) {
    zoom = 9; // tablet
  } else {
    zoom = 6.5; // laptop & escritorio
  }

  const camera = new THREE.OrthographicCamera(
    -ARCamera * zoom + 0.6,
    ARCamera * zoom - 1,
    zoom,
    -zoom + 0.6,
    -10,
    40,
  );
  camera.position.set(-11.77, 7, 18.75);

  scene.add(camera);

  if (window.location.hash === "#controls") {
    cameraFolder
      ?.add(camera.position, "x", -20, 20, 0.01)
      .name("Camera Position X");
    cameraFolder
      ?.add(camera.position, "y", -20, 20, 0.01)
      .name("Camera Position Y");
    cameraFolder
      ?.add(camera.position, "z", -20, 20, 0.01)
      .name("Camera Position Z");
    cameraFolder?.add(camera, "left", -40, 0).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "right", 0, 40).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "top", 0, 40).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "bottom", -40, 0).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "near", -10, 10).onChange(() => {
      camera.updateProjectionMatrix();
    });
    cameraFolder?.add(camera, "far", 0, 30).onChange(() => {
      camera.updateProjectionMatrix();
    });
  }

  // :::::: RENDER :::::::
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
    powerPreference: "high-performance",
    alpha: true,
  });
  renderer.setSize(sizes.width, sizes.height);
  renderer.shadowMap.enabled = true;

  // :::::: POSTPROCESSING ::::::
  const composer = new EffectComposer(renderer);
  const renderPass = new RenderPass(scene, camera);
  composer.addPass(renderPass);

  let pixelSizeRatio, gridSize;

  if(sizes.width < 768) {
    pixelSizeRatio = 2.0; // movil
    gridSize = 2.0;
  } else if (sizes.width < 1024) {
    pixelSizeRatio = 2.0; // tablet
    gridSize = 2.9;
  } else {
    pixelSizeRatio = 2.0; // laptop & escritorio
    gridSize = 3.0;
  }

  const ditheringEffect = new DitheringEffect({
    pixelSizeRatio, // tamano de los pixeles
    gridSize, // tamano de la cuadrícula del dithering
    grayscaleOnly: false, // solo blanco y negro
  });

  const ditherinPass = new EffectPass(camera, ditheringEffect);
  composer.addPass(ditherinPass);

  // :::::: DITHERING CONTROLS ::::::
  if (window.location.hash === "#controls") {
    ditheringFolder
      ?.add({ pixelSizeRatio: 2 }, "pixelSizeRatio", 1, 10, 0.1) // Rango de 1-10 con step 1
      .name("Pixelation Strength")
      .onChange((value: number) => {
        ditheringEffect.setPixelSizeRatio(value);
      });

    ditheringFolder
      ?.add({ gridSize: 3.0 }, "gridSize", 1, 20, 0.1) // Rango de 1-20 con step 1
      .name("Effect Resolution")
      .onChange((value: number) => {
        ditheringEffect.setGridSize(value);
      });
  }

  // :::::: CONTROLS :::::::
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.update();
  controls.enableZoom = false;
  controls.enablePan = false;
  controls.enableRotate = false;
  controls.enableDamping = false;

  // :::::: ENVIRONMENT :::::::
  const hdr =
    "https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/je_gray_park_1k.hdr";

  let environmentTexture;
  new RGBELoader().load(hdr, (texture) => {
    environmentTexture = texture;
    environmentTexture.mapping = THREE.EquirectangularReflectionMapping;
    scene.environment = environmentTexture;
    scene.environmentIntensity = 0.02;
  });

  // :::::: MODELO ::::::
  const loader = new GLTFLoader();
  let model;

  loader.load("./logo.glb", (gltf) => {
    model = gltf.scene;

    model.traverse((node) => {
      if (node.isMesh) {
        node.castShadow = true;
        node.receiveShadow = true;
      }
    });

    // :::::::::: ANIMACIONES :::::::::::
    let initZPositions = [3.430607, 5.8232, 3.129749, 1.349015];

    gltf.scene.children.forEach((child, idx) => {
      const finalZ = child.position.z;

      child.position.z = initZPositions[idx];

      gsap.fromTo(
        child.scale,
        {
          x: 0,
          y: 0,
          z: 0,
        },
        {
          x: 178,
          y: 178,
          z: 178,
        },
      );

      gsap.to(child.position, {
        z: finalZ,
        duration: 1.2,
        ease: "elastic.out(1, 0.5)",
        delay: idx * 0.1,
      });
    });

    scene.add(gltf.scene);
  });

  // :::::: RESIZE :::::::
  window.addEventListener("resize", () => {
    // camera
    sizes.width = window.innerWidth;
    sizes.height = window.innerHeight;

    // aspect
    const ARCamera = sizes.width / sizes.height;
    let zoom;

    if (sizes.width < 768) {
      zoom = 14; // movil
    } else if (sizes.width < 1024) {
      zoom = 9; // tablet
    } else {
      zoom = 7; // laptop & escritorio
    }
    camera.aspect = sizes.width / sizes.height;
    camera.left = -ARCamera * zoom + 0.6;
    camera.right = ARCamera * zoom - 1;
    camera.top = zoom;
    camera.bottom = -zoom + 0.6;
    camera.updateProjectionMatrix();

    // renderer
    renderer.setSize(sizes.width, sizes.height);
    composer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  });

  // ::::::: MOUSE MOVE :::::::
  document.addEventListener("mousemove", (e) => onMouseMove(e));

  let mouse = {
    mouseX: 0,
    mouseY: 0,
    targetX: 0,
    targetY: 0,
    windowHalfX: sizes.width / 2,
    windowHalfY: sizes.height / 2,
  };

  function onMouseMove(event) {
    // raton X e Y desde el centro de la pantalla
    mouse.mouseX = event.clientX - mouse.windowHalfX;
    mouse.mouseY = event.clientY - mouse.windowHalfY;
  }

  // variables de rotacion actual
  let currentRotationX = Math.PI / 2; // importante para que el modelo este parado
  let currentRotationY = 0;

  const clock = new THREE.Clock();
  // :::::: ANIMATION :::::
  function animation() {
    const elapsedTime = clock.getElapsedTime();

    if (model) {
      mouse.targetX = mouse.mouseX * 0.0002;
      mouse.targetY = mouse.mouseY * 0.0002;

      // animacion suave de rotacion
      currentRotationY += (mouse.targetX - currentRotationY) * 0.06;
      currentRotationX += (mouse.targetY - currentRotationX) * 0.06;

      // actuailzar rotacion del modelo
      model.rotation.x = currentRotationX + Math.PI / 2;
      model.rotation.z = currentRotationY;

      // flotar
      model.position.y = Math.sin(elapsedTime * 0.14);
    }

    controls.update();
    camera.lookAt(new THREE.Vector3(0, 0, 0));

    composer.render(scene, camera);
    window.requestAnimationFrame(animation);
  }
  animation();
</script>
